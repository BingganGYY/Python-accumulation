######1.报错积累

######2.时间
###00time（时间）、datetime（日期）、calendar（日历）
import time
# 1.时间戳，获取1970年以来的秒数
time.time()  
# 2.格式化时间,把时间进行任意的格式化输出
time.strftime("%Y-%m-%d %H:%M:%S", s)  # strftime：标准时间 
# 3.结构化时间,把时间分类划分
time.localtime()
# time.struct_time(tm_year=2018, tm_mon=11, tm_mday=14, tm_hour=12, tm_min=3, tm_sec=9, tm_wday=2, tm_yday=318, tm_isdst=0)
# 4.三种时间之间的转换
# (1)时间戳 -> 结构化时间：time.localtime( 时间戳)、time.gmtime( 时间戳)
s=time.localtime(18888888) #时区问题  gmtime :格林尼治时间
# (2)结构化时间 -> 格式化时间：time.strftime(时间格式，结构化时间)
s=time.localtime()
s1=time.strftime("%Y-%m-%d %H:%M:%S", s)
# (3)格式化时间 ->结构化时间 time.strptime(格式化时间，相应的格式字符串)
s="1995-3-15 03:29:37"
s1=time.strptime(s, "%Y-%m-%d %H:%M:%S")  # strptime：结构时间
# (4)结构化时间 -> 时间戳：time.mktime(结构化时间)
s=time.localtime()
s1=time.mktime(s)

import datetime
# 1.date类
datetime.date(year,month,day) # 返回year-month-day
# 2.time类
datetime.time(hour,minute,second,microsecond,tzoninfo) # 返回08:29:30

# （1）获取现在时间年月日时分秒
datetime.datetime.now()
# （2）时间取差值
datetime.timedelta(days=-1))
# （3）字符串日期2019-05-01转时间格式

import calendar


#######3.方法（函数）积累
append方法  # 向列表末尾添加新的对象，对象可以是一个元素、列表、字典或元组
list.append(object)

index方法  # 子字符串“第一个”匹配项出现在字符串中的索引位置
list1 = ['Google', 'Runoob', 'Taobao', 'Google', 'Google']
print("Google的索引值：",list1.index("Google"))


#######4.python代码规范
import datetime
import time
import calendar
import pandas as pd
import numpy as np

class DateTimeModel(object):  # 类：要写object

    # 要有各个方法的注释，解释该方法用途，每个方法要有一个空格
    # 获取当天时间
    def get_today(self):  # 方法：要写self
        data_time = datetime.datetime.now().strftime('%Y-%m-%d')
        return data_time
    
    # 多个参数要有参数解释 解释内容模板见""" """    
    # 分页
    def page_data(self, result, current_page=1, page_size=10):
        """
        分页函数
        :param result 列表
        :param current_page 当前页
        :param page_size 页大小
        """
        if page_size > len(result):
            current_page = 1
        f = lambda a: map(lambda b: a[b: b + page_size], range(0, len(a), page_size))
        s = list(f(result))
        return s[current_page - 1] if s else []


#######5.连接数据库
pip install pymysql -i https://pypi.tuna.tsinghua.edu.cn/simple # 安装pymysql
##-----(1)导入所需库包----------------------------------
import numpy as np
import pandas as pd
import datetime
import os
import pymysql
import matplotlib.pyplot as plt
import matplotlib as mpl
# 忽略数据库警告
import warnings
warnings.filterwarnings("ignore",category=pymysql.Warning)

##-----(2)读数据,连接database--------------------------
def get_target_data():
    conn = pymysql.connect(
        host='10.203.39.154',
        user='tdata',
        password='DuQ5cd1xb$%x',
        database='tdata',
        charset='utf8')
    # 定义将要执行的SQL语句
    cursor = conn.cursor()
    sql1 = '''SELECT
             t1.room,
                t1.product,
                t1.host_ip
            FROM
             tdata_res_life_cycle_rdb_host_day t1
            WHERE
             t1.date_time ='20200804'
            '''
    cursor.execute(sql1) 
    data = cursor.fetchall() 
    df_target = pd.DataFrame(list(data))  
    if len(df_target)==0:
        pass
    else:
        df_target.columns = ['room', 'product','host_ip']
    cursor.close()
    conn.close()
    return df_target



























